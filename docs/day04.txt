4日目：ControllerとView
=====

昨日は Zend Framework がどうやってデータベースエンジン間の違いを吸収していたり、オブジェクト指向クラスに変換しているかを見ました。


Jobeetに必要最低限のコードを付け足す
-------------------------------

昨日はテーブルデータゲートウェイを使ったデータベースへのアクセスモデルを作りましたが、モジュールが実際に処理を行うControllerや、表示を行うViewを作成していませんので次のコマンドを打ち込みます。

今日は昨日作った job モジュールの基本的なカスタマイズを続けます。job モジュールは Jobeet に必要なコードをすべて有しています:

    * 求人の一覧ページ
    * 新しく求人を投稿するページ
    * 投稿した求人を更新するページ
    * 求人を削除するページ


### モジュールの起動設定とデフォルトモジュールの変更:
Zend Framework はアプリケーションプロジェクトを作成すると、デフォルトで default モジュールでアプリケーションが動作するよう設定されています。
\
このデフォルトに設定されている default モジュールを job モジュールに変更するため、application.ini を以下のように修正します。

    // 以下の行をコメントアウト
    ;resources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"

    // 以下の3行を追加
    resources.frontController.moduledirectory = APPLICATION_PATH "/modules"
    resources.frontController.params.prefixDefaultModule = 1
    resources.frontController.defaultmodule = "job"
    resources.modules[] =
    resources.view[] =


    ** `resources.frontController.moduledirectory` は、アプリケーションとして実行させるためのモジュールを格納したディレクトリを指定します。
    ** `resources.frontController.defaultmodule` は、default モジュールに変わるデフォルトモジュールを指定します。
    ** `resources.frontController.params.prefixdefaultmodule` は、モジュール名をプリフィックスとして各モジュールの Controller に付加するよう指定します。
    ** `resources.modules[] =` の記述はモジュールリソースの追加を表します。
    ** `resources.view[] =` の記述は view オブジェクトをリソースとして利用するための指定です。
    ** この他にもたくさんのリソースオプションがありますので、公式サイトや、ソースを眺めるなどして新たな発見を楽しんでください


### モジュールを作成する:
つぎは実際に Jobeet で利用する job モジュールのコードは一切準備されていませんので、以下のコマンドを実行し、job モジュールを作成します。
まず、frontend の job モジュールを作成するため、以下のコマンドを実行します。

    $ zf create module job
    reating the following module and artifacts:
    /home/Jobeet/application/modules/job/controllers
    /home/Jobeet/application/modules/job/models
    /home/Jobeet/application/modules/job/views
    /home/Jobeet/application/modules/job/views/scripts
    /home/Jobeet/application/modules/job/views/helpers
    /home/Jobeet/application/modules/job/views/filters
    Added a key for the job module to the application.ini file
    Updating project profile '/home/Jobeet/.zfproject.xml'

実行するとこのような表示がされ、「application」ディレクトリ直下に「modules」というディレクトリが作成されています。

この「modules」ディレクトリ以下にモジュールが作成されていきます。

次に、作成した job モジュールで利用する Controller と View を追加するため、次のコマンドを実行します。

    $ zf create controller error 0 job      // default モジュールに ErrorController を作成する
    $ zf create action error error 1 job    // 上記で作成した ErrorController に errorAction を追加する
    $ zf create controller index 1 job      // defualt モジュールに IndexController を作成する

  ** 0 と 1 の箇所は 表示部分を形成する view ファイルを作成するかの指定をします **

上記のように表示されると、job モジュールのスケルトンが作成されます。



/*
-- ここは別な場所で利用するので一時的に保存！
すでにコードの準備ができてるのでモックアップに近づくようにリファクタリングしてゆきます。

同じように backend となるモジュール「admin」モジュールを作成します。

    $ zf create module admin
    Creating the following module and artifacts:
    /home/Jobeet/application/modules/admin/controllers
    /home/Jobeet/application/modules/admin/models
    /home/Jobeet/application/modules/admin/views
    /home/Jobeet/application/modules/admin/views/scripts
    /home/Jobeet/application/modules/admin/views/helpers
    /home/Jobeet/application/modules/admin/views/filters
    Updating project profile '/home/Jobeet/.zfproject.xml'

ここまで実行すると、frontend と backend となるモジュールの作成が完了しました。

    $ zf create controller error 0 admin        // admin モジュールに ErrorController を作成する
    $ zf create action error Error 1 admin      // 上記で作成した ErrorController に errorAction を追加する
    $ zf create controller index 1 admin        // admin モジュールに IndexController を作成する
*/



MVC アーキテクチャ
---------------

もしフレームワークなしで PHP で Web サイトの開発を行うならば、HTML ごとに1つの PHP ファイルのパラダイムを使うでしょう。これらの PHP ファイルは同じ種類の構造を含んでます。それは初期化、全体設定、ページリクエストのためのビジネスロジックやデータベースからレコードの検索、最終的にはページを生成するための HTML コードを含んでいます。

HTML からロジックを分離するためにテンプレートエンジンを利用しているかもしれません。ビジネスロジックからモデルとのやりとりを分離するためにデータベース抽象化レイヤーを利用しているでしょう。しかしたいていの場合、メンテナンスが悪夢になるたくさんのコードで終わることになります。速く作れますが、時間が経つにつれて、とりわけ変更するのが難しくなります。どのように作り、どのように動くのか、あなた以外は誰も理解できないからです。

これらすべての問題に対し、よい解決方法があります。Web 開発の分野では近年コーディングのための最適解として認識されているのはMVC デザインパターンです。手短に言えば、MVC デザインパターンはコードの性質ごとに体系化する方法を定義しています。このパターンは3つのレイヤーにわけられます。

 * Model レイヤーはビジネスロジックを定義します (データベースはこのレイヤーに所属する)。Zend Framework ではモデルデータを application/models/ または application/modules/[module]/models に保存されます。
 * View はユーザーが情報をやりとりするレイヤーです (テンプレートエンジンはこのレイヤーの一部)。Zend Framework において、View レイヤーは主に PHP テンプレートで構成されます。今日の後で見るようにこれらは application/layouts/scripts/ または application/modules/[module]/layouts/scripts/ に保存されます。
 * Controller はモデルからデータを取得し、クライアントへ表示するため View にデータを渡す処理を担当します。Zend Framework をインストールした初日に、すべてのリクエストはフロントコントローラ (index.php) によって管理されているのを見ました。

これらフロントコントローラは実際の動作はアクション (action) で行われます。昨日見たようにこれらアクションはモジュール (module) で論理的にグループにわけられます。

[image MVC.png]

今日は、ホームページと求人ページをカスタマイズするために2日目で定義したモックアップを使います。これらを動的なものにもします。この先、Zend Framework のディレクトリを構造とレイヤーのあいだでコードを分離する方法を示すためにたくさんの異なるファイルでたくさんの調整を行います。


レイアウト
-------

まず、モックアップをじっと見てみると各ページのほとんどが同じ部品であることに気づくでしょう。PHP や HTML であろうとなかろうと、コードの重複はわるいことです。ですので、コードが重複している View 要素を抑える方法が必要となります。

この問題を解決する1つの方法としてテンプレートごとにヘッダーとフッターを定義する方法があります:

[image header_footer.png]

しかし、この場合、ヘッダーやフッターは有効な HTML を含んでいません。よい方法であることは違いありません。車輪の再発明をする代わりに、この問題を解決するため別のデザインパターンを使うことにします。それは Decorator デザインパターンです。Decorator デザインパターンは別のやり方で問題を解決します。

グローバルテンプレートによって表示されるコンテンツの後に、デコレートされるテンプレートを使います。

Zend Framework ではグローバルテンプレートをレイアウトと呼びます:

[image layout.png]

アプリケーションのデフォルトテンプレートとして layout.phtml が呼び出されます。それは layouts/scripts/ ディレクトリに保存されます。このディレクトリにはアプリケーションのグローバルテンプレートすべてが置かれます。


### レイアウトを有効にするために:

Zend Framework ではアプリケーションのデフォルトでは、レイアウトが有効になっていません。有効に守るために以下のコマンドを実行します。

    $ zf enable layout
    Layouts have been enabled, and a default layout created at /home/Jobeet/application/layouts/scripts/layout.phtml
    A layout entry has been added to the application config file.

このコマンドを実行することで、レイアウトを利用することが出来ます。

次に Zend Framework のデフォルトレイアウトを下記コードに置き換えましょう:

[source application/layouts/scripts/layout.phtml]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja"><!-- InstanceBegin template="/Templates/DefaultTemplate.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<title>Jobeet for Zend Framework</title>
<meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <meta name="description" content="symfonyのチュートリアル「Jobeet」をZend Frameworkに移植したチュートリアルです。" />
    <meta name="keywords" content="Jobeet,ZendFramework" />
    <meta name="title" content="Jobeet for Zend Framework" />
    <?php echo $this->headLink(); ?>
</head>
<body>
    <div id="container">
        <div id="header">
            <h1><a href="#"><img src="images/logo.gif" alt="jobeet" /></a></h1>
            <p id="post-a-job"><img src="images/post_btn.gif" alt="post a job"/></p>
        <!-- End header --></div>
        <div id="contents">
            <form action="#" method="post" id="searchform">
                <p id="go-search"><input type="image" id="search" name="search" src="images/go_btn.gif" /></p>
                <p id="keyword"><input type="text" id="keywords" name="keywords" value="" /></p>
                <p id="search-description">Enter some keywords (city, country, position, ...)</p>
            </form>

            <div id="content">
                <?php echo $this->layout()->content; ?>
            <!-- End content --></div>

        <!-- End contents --></div>
        <div id="footer">
            <ul id="footer-navi">
                <li><a href="#">text</a></li>
                <li><a href="#" class="feed">feed</a></li>
                <li><a href="#">text</a></li>
                <li><a href="#">text</a></li>
            </ul>

            <ul id="footer-copy">
                <li id="footer-cc-license"><a rel="license" href="http://creativecommons.org/licenses/by-sa/2.1/jp/"><img alt="クリエイティブ・コモンズ・ライセンス" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/2.1/jp/80x15.png" /></a></li>
                <li id="footer-jobeet"><a href="http://www.symfony-project.org/jobeet/1_4/Propel/ja/"><img src="images/jobeet_logo.gif" alt="Jobeet"/></a></li>
                <li id="footer-zf"><a href="http://framework.zend.com/"><img src="images/zf_logo.gif" alt="powerd by Zend Framework"/></a></li>
            </ul>
        <!-- End footer --></div>
    <!-- End container --></div>
</body>
</html>


** 標準では、zf create project タスクはプロジェクトのアセットを生成しません。 public ディレクトリ以下であれば、ほとんどの場合、画像やCSSの公開は行えます。
** 今回は、public ディレクトリ以下に、css images js の3つのディレクトリを作成し、 css には CSSファイルを、 images には画像ファイルを、 js にはJavaScriptファイルを格納していきます。


鋭い読者ならデフォルトレイアウトがどこにも記述されていないことにお気づきでしょう。

import.css は生成された HTML のなかに確かに含まれています。しかしどこにも見当たりません。どうやって可能にしているのでしょうか？

スタイルシートはレイアウトの <head> タグブロックで見つかる $this->headLink() 関数の呼び出しによってインクルードされました。

$this->headLink() 関数はヘルパー (helper) と呼ばれます。ヘルパーは Zend Framework によって定義されるクラスオブジェクトで、パラメータを受け取り、HTML コードを返します。

たいていの場合、ヘルパーによって時間が節約され、テンプレートで頻繁に使われるコードスニペットをパッケージにまとめます。

$this->headLinkI() ヘルパーはスタイルシート用に <link> タグを生成します。

それにしても、ヘルパーはどうやって格納するスタイルシートを知るのでしょうか？

View レイヤーはアプリケーションの起動準備ファイルである application/Bootstrap.php に「_init」で始まる関数を作成することで定義することが可能です。

Bootstrap.php に記述するコードは次のとおりです:
    protected function _initViewHelpers()
    {
        $view = $this->bootstrap("view")->getResource("view");
        $view->headLink(array(
            "rel"   => "stylesheet",
            "href"  => "/css/import.css",
            "type"  => "text/css",
            "media" => "Screen,Projection,TV",
        ));
    }
    ** Bootstrap.php に記述する「_init」で始まる、protected関数は、起動する前の下準備をするコードを記述するクラスです。
    ** 「_ini」で始り、protected 関数として定義していれば、好きな関数名をつけることができます。


今回記述した「_initViewHelpers」関数は、ヘルパーの利用準備を行うための関数として定義しました。

